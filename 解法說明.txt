0/1 knapsack problem:
	以DP解之，建立二維陣列dp[M][M*1000]儲存DP結果，其中dp[i][j]代表意義為:在合金總個數為i時，重量總和為j的最小花費。
    	對於每個合金都進行一次表格的更新。若要更新dp[i][j]，考慮在重量為j時，加入此合金A的狀況能不能使花費變小，加入A後，重量為j在表格的呈現，是dp[i-1][j-(A的重量)]，也就是現有總數為i-1時，加入A後能讓總重量變為j的情況。
    	所以DP公式為:dp[i][j] = min(  dp[i][j] ,
					dp[i-1][j-(A重)]+(A成本)  )
	起始條件為dp[0][0]=0。
	最後，要檢查客戶需求:M, C_Min與C_Max時，只要檢查dp[M][C_Min*M] 到 dp[M][C_Max*M] 中，最小的成本及市所求。
